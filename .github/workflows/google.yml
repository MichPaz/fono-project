# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "development" , "staging", "production" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: southamerica-east1
  GKE_CLUSTER: fono-first-cluster
  GKE_ZONE: southamerica-east1
  DEPLOYMENT_NAME_COMP: fono-comp
  DEPLOYMENT_NAME_API: fono-api
  DEPLOYMENT_NAME_APP: fono-app
  REGISTRY_DOMAIN: southamerica-east1-docker.pkg.dev
  IMAGE_COMP: fono-comp
  IMAGE_API: fono-api
  IMAGE_APP: fono-app

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v4
    - name: nodeFonoAPP
      uses: actions/setup-node@v2
      with:
        node-version: 16.
        secrets: GOOGLE_CLOUD_BUILD_CREDENTIALS

    - name: defineProjectVersion
      run: |
        VERSION=$(cat projectVersion)
        echo "Valor da versÃ£o: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: installBuildFonoAPP
      run: |
        cd fono-app/
        npm install --legacy-peer-deps
        npm run build

    - name: configure cred docker
      uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        project_id: ${{ env.GOOGLE_PROJECT }}
        export_default_credentials: true
  
    - name: build and push the docker image
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        IMAGE_TAG: ${{ env.REGISTRY_DOMAIN }}/${{ env.GOOGLE_PROJECT }}/${{env.IMAGE_APP}}$ENV_SUFFIX:$VERSION 
      run: |
        gcloud auth configure-docker ${{ env.REGISTRY_DOMAIN }}
        docker build -t ${{ env.IMAGE_TAG }} .
        docker push ${{ env.IMAGE_TAG }}

    # - name: loginDocker
    #   env: # Or as an environment variable
    #     GOOGLE_CLOUD_BUILD_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_BUILD_CREDENTIALS }}
    #     USERNAME: ${{ secrets.USERNAME }}
    #   run: |
    #     export CR_PAT=${{env.GOOGLE_CLOUD_BUILD_CREDENTIALS}}
    #     echo $CR_PAT | docker login southamerica-east1-docker.pkg.dev -u $USERNAME --password-stdin
  

    # - name: buildPushFonoAPP
    #   run: |
    #     docker build -t ${{ env.REPOSITORY_APP }}$ENV_SUFFIX:$VERSION .
    #     docker push ${{ env.REPOSITORY_APP }}$ENV_SUFFIX:$VERSION
    
    # # Configure Workload Identity Federation and generate an access token.
    # - id: 'auth'
    #   name: 'Authenticate to Google Cloud'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     token_format: 'access_token'
    #     # workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #     service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # - name: Docker configuration
    #   run: |-
    #     echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # # Get the GKE credentials so we can deploy to the cluster
    # - name: Set up GKE credentials
    #   uses: google-github-actions/get-gke-credentials@v0
    #   with:
    #     cluster_name: ${{ env.GKE_CLUSTER }}
    #     location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    # - name: Build
    #   run: |-
    #     docker build \
    #       --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_APP/$IMAGE:$GITHUB_SHA" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --build-arg GITHUB_REF="$GITHUB_REF" \
    #       .
    # # Push the Docker image to Google Artifact Registry
    # - name: Publish
    #   run: |-
    #     docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
    # # Set up kustomize
    # - name: Set up Kustomize
    #   run: |-
    #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #     chmod u+x ./kustomize
    # # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #   run: |-
    #     # replacing the image name in the k8s template
    #     ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
    #     ./kustomize build . | kubectl apply -f -
    #     kubectl rollout status deployment/$DEPLOYMENT_NAME
    #     kubectl get services -o wide
